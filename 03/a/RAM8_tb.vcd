$date
	Mon Nov  4 20:23:31 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module RAM8_tb $end
$var wire 16 ! out [15:0] $end
$var reg 3 " address [2:0] $end
$var reg 1 # clk $end
$var reg 16 $ in [15:0] $end
$var reg 1 % load $end
$var reg 1 & reset $end
$var integer 32 ' file [31:0] $end
$var integer 32 ( i [31:0] $end
$scope module dut $end
$var wire 3 ) address [2:0] $end
$var wire 1 * clk $end
$var wire 16 + in [15:0] $end
$var wire 1 % load $end
$var wire 16 , r8_o [15:0] $end
$var wire 16 - r7_o [15:0] $end
$var wire 16 . r6_o [15:0] $end
$var wire 16 / r5_o [15:0] $end
$var wire 16 0 r4_o [15:0] $end
$var wire 16 1 r3_o [15:0] $end
$var wire 16 2 r2_o [15:0] $end
$var wire 16 3 r1_o [15:0] $end
$var wire 16 4 out [15:0] $end
$scope module mx $end
$var wire 3 5 sel [2:0] $end
$var wire 16 6 out [15:0] $end
$var wire 16 7 h [15:0] $end
$var wire 16 8 g [15:0] $end
$var wire 16 9 f [15:0] $end
$var wire 16 : e [15:0] $end
$var wire 16 ; d [15:0] $end
$var wire 16 < c [15:0] $end
$var wire 16 = b [15:0] $end
$var wire 16 > a [15:0] $end
$upscope $end
$scope module r1 $end
$var wire 1 * clk $end
$var wire 16 ? in [15:0] $end
$var wire 1 % load $end
$var reg 16 @ out [15:0] $end
$upscope $end
$scope module r2 $end
$var wire 1 * clk $end
$var wire 16 A in [15:0] $end
$var wire 1 % load $end
$var reg 16 B out [15:0] $end
$upscope $end
$scope module r3 $end
$var wire 1 * clk $end
$var wire 16 C in [15:0] $end
$var wire 1 % load $end
$var reg 16 D out [15:0] $end
$upscope $end
$scope module r4 $end
$var wire 1 * clk $end
$var wire 16 E in [15:0] $end
$var wire 1 % load $end
$var reg 16 F out [15:0] $end
$upscope $end
$scope module r5 $end
$var wire 1 * clk $end
$var wire 16 G in [15:0] $end
$var wire 1 % load $end
$var reg 16 H out [15:0] $end
$upscope $end
$scope module r6 $end
$var wire 1 * clk $end
$var wire 16 I in [15:0] $end
$var wire 1 % load $end
$var reg 16 J out [15:0] $end
$upscope $end
$scope module r7 $end
$var wire 1 * clk $end
$var wire 16 K in [15:0] $end
$var wire 1 % load $end
$var reg 16 L out [15:0] $end
$upscope $end
$scope module r8 $end
$var wire 1 * clk $end
$var wire 16 M in [15:0] $end
$var wire 1 % load $end
$var reg 16 N out [15:0] $end
$upscope $end
$upscope $end
$scope task display $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 N
bx M
b0 L
bx K
b0 J
bx I
b0 H
bx G
b0 F
bx E
b0 D
bx C
b0 B
bx A
b0 @
bx ?
b0 >
b0 =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
b0 6
bx 5
b0 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
bx +
z*
bx )
bx (
b10000000000000000000000000000011 '
0&
x%
bx $
x#
bx "
b0 !
$end
#1
1&
#2
b111 "
b111 )
b111 5
0%
b101010101010101 $
b101010101010101 +
b101010101010101 ?
b101010101010101 A
b101010101010101 C
b101010101010101 E
b101010101010101 G
b101010101010101 I
b101010101010101 K
b101010101010101 M
0#
b10101100 (
0&
